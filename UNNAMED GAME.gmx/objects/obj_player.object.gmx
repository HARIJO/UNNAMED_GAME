<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

spd = 4;
jspd = 8;
hspd = 0;
vspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics

// Control

var rkey = keyboard_check(ord("D"));
var lkey = keyboard_check(ord("A"));
var ukey = keyboard_check(ord("W"));

// Check for ground
if (place_meeting(x, y+1, obj_solid)) {
    vspd = 0;
    
    // Jumping
    if (ukey) {
        vspd = -jspd;
    }
} else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += obj_planetcontroller.grav;
    }
    
    if(keyboard_check_released(ord("W")) &amp;&amp; vspd &lt; -4) {
        vspd = -4;
    }   
}

// Moving right
if (rkey) {
    if(hspd &lt; spd) {
        hspd += obj_planetcontroller.fric;
    } else {
        hspd = spd;
    }
}

// Moving left
if (lkey) {
    if(hspd &gt; 0 - spd) {
        hspd -= obj_planetcontroller.fric;
    } else {
        hspd = -spd;
    }
}

// If not moving or pressing buttons
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += obj_planetcontroller.fric;
        } else {
            hspd -= obj_planetcontroller.fric;
        }
    }
}

// Horizontal collision
if (place_meeting(x+hspd, y, obj_solid)) {
    while (!place_meeting(x+sign(hspd), y, obj_solid)) {
        x += sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collision
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Move vertically
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
